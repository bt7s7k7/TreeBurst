/*
 * This source file was generated by the Gradle 'init' task
 */
package bt7s7k7.treeburst;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.Test;

import bt7s7k7.treeburst.parsing.GenericParser;
import bt7s7k7.treeburst.parsing.StringSpan;
import bt7s7k7.treeburst.parsing.TreeBurstParser;
import bt7s7k7.treeburst.support.InputDocument;

class ParsingTest {
	@Test
	void stringSpan() {
		var span = new StringSpan("0123456789");
		assertEquals("0123456789", span.toString());
		var slice = span.substring(3, 3);
		assertEquals("345", slice.toString());
		assertEquals("4", slice.substring(1, 1).toString());

		assertTrue(slice.startsWith("34", 0));
		assertTrue(slice.startsWith("45", 1));

		assertFalse(slice.startsWith("3456", 0));
	}

	@Test
	void parserRead() {
		var parser = new GenericParser("111vvvv222");

		var prefix = parser.readUntil((v, i) -> Character.isAlphabetic(v.at(i)));
		assertEquals("111", prefix.toString());

		var value = parser.readWhile((v, i) -> Character.isAlphabetic(v.at(i)));
		assertEquals("vvvv", value.toString());

		var suffix = parser.readWhile((__, ___) -> true);
		assertEquals("222", suffix.toString());
	}

	@Test
	void parserMatches() {
		var parser = new GenericParser("111vvvv222");
		assertTrue(parser.matches("111"));
		assertFalse(parser.matches("vvv"));
		assertTrue(parser.consume("111"));
		assertTrue(parser.matches("vvv"));
	}

	@Test
	void parserSmoke() {
		var document = new InputDocument("anon", "0.58 + 2 * 3");
		var parser = new TreeBurstParser(document);

		var root = parser.parse();
		assertEquals("Group[\n" +
				"    position=anon:1:1,\n" +
				"    children=[\n" +
				"        Invocation[\n" +
				"            position=anon:1:6,\n" +
				"            target=MemberAccess[\n" +
				"                position=anon:1:6,\n" +
				"                receiver=NumberLiteral[\n" +
				"                    position=anon:1:1,\n" +
				"                    value=0.58\n" +
				"                ],\n" +
				"                member=k:add\n" +
				"            ],\n" +
				"            args=[\n" +
				"                Invocation[\n" +
				"                    position=anon:1:10,\n" +
				"                    target=MemberAccess[\n" +
				"                        position=anon:1:10,\n" +
				"                        receiver=NumberLiteral[\n" +
				"                            position=anon:1:8,\n" +
				"                            value=2.0\n" +
				"                        ],\n" +
				"                        member=k:mul\n" +
				"                    ],\n" +
				"                    args=[\n" +
				"                        NumberLiteral[\n" +
				"                            position=anon:1:12,\n" +
				"                            value=3.0\n" +
				"                        ]\n" +
				"                    ]\n" +
				"                ]\n" +
				"            ]\n" +
				"        ]\n" +
				"    ]\n" +
				"]",
				root.toFormattedString());
	}
}
