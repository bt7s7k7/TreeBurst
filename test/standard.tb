// Test: assert success
assert(true)

// Test: assert fail, expect fail
assert(false)

// Test: comparison operators
assert(true == true)
assert(false == false)
assert(true != false)
assert(1 != "")
assert(1 == 1)
assert(1 != 2)
assert(void != null)
assert(void == void)

// Test: assert equal
assertEqual(1, 1)
assertEqual("one", "one")

// Test: assert unequal, expect fail
assertEqual(1, 2)

// Test: logical operators
assertEqual(false && false, false)
assertEqual(true && false, false)
assertEqual(false && true, false)
assertEqual(true && true, true)

assertEqual(false || false, false)
assertEqual(true || false, true)
assertEqual(false || true, true)

assertEqual(getCounter(), 0)

1 && increment()
assertEqual(getCounter(), 1)

0 && increment()
assertEqual(getCounter(), 1)

1 || increment()
assertEqual(getCounter(), 1)

0 || increment()
assertEqual(getCounter(), 2)

// Test: coalescing
assertEqual(false ?? 0, false)
assertEqual(null ?? 0, 0)
assertEqual(void ?? 0, 0)
assertEqual(null else 0, null)
assertEqual(void else 0, 0)

// Test: numeric operators
assertEqual(1 + 1.5, 2.5)
assertEqual(1 - 1.5, -0.5)
assertEqual(1 * 1.5, 1.5)
assertEqual(2 / 4, 0.5)
assertEqual(5 % 2, 1)
assertEqual(-(1 + 1), -2)
assertEqual(3 | 4, 7)
assertEqual(3 & 1, 1)
assertEqual(3 ^ 1, 2)

// Test: numeric comparison operators
assertEqual(1 > 2, false)
assertEqual(1 < 2, true)
assertEqual(2 <= 2, true)
assertEqual(3 <= 2, false)
assertEqual(3 >= 2, true)
assertEqual(3 >= 3, true)

// Test: numeric operators typecheck, expect fail
void + 1

// Test: if
assertEqual(@if(true 1 0), 1)
assertEqual(@if(false 1 0), 0)
assertEqual(@if(false 1), void)

// Test: function declaration
assertEqual((\4)(), 4)
assertEqual((\(a) a + 1)(2), 3)

// Test: variable declaration
$x = 1
assertEqual(x, 1)
assertEqual($y = 2, 2)
assertEqual(x = x + 1, 2)
assertEqual(x, 2)

// Test: variable declaration duplicate, expect fail
$x = 1
$x = 2

// Test: function call method
$owner = Table.new()
$owner.method = \(this, arg) {
    assertEqual(this, other)
    assertEqual(arg, 5)
    increment()
}

$other = Table.new()
owner.method.call(other, [5])
assertEqual(getCounter(), 1)

// Test: table new
$table = Table.new()
$table.name = "foo"
assertEqual(table.name, "foo")

// Test: table property mutation
$table = Table.new()
$table.x = 1
assertEqual(table.x, 1)
table.x = 2
assertEqual(table.x, 2)

// Test: table duplicate property, expect fail
$table = Table.new()
$table.name = "foo"
$table.name = "foo2"

// Test: table method declaration
$table = Table.new()
$table.foo = \(this, arg) {
    assertEqual(this, table)
    assertEqual(arg, 24)
    increment()
}

table.foo(24)
assertEqual(getCounter(), 1)

$table.bar = \(a, b) {
    assertEqual(a, "a")
    assertEqual(b, "b")
    increment()
}

table.bar("a", "b")
assertEqual(getCounter(), 2)

// Test: table void prevention 1, expect fail
$x = Table.new()
$x.value = void

// Test: table void prevention 2, expect fail
$x = Table.new()
$x.value = 5
x.value = void

// Test: native type extension
$Number.prototype.plusOne = \(this) this + 1

assertEqual((1).plusOne(), 2)

// Test: checking setting properties, expect fail
"text".x = 5

// Test: checking declaring properties, expect fail
$"text".x = 5

// Test: array
$x = [1,2,3]
assertEqual(x.length, 3)
assertEqual(x[0], 1)
assertEqual(x[1], 2)
assertEqual(x[-1], 3)
assertEqual(x[-2], 2)

x[0] = 5
assertEqual(x[0], 5)

// Test: array bounds check 1, expect fail
$x = [1,2,3]
x[4]

// Test: array bounds check 2, expect fail
$x = [1,2,3]
x[-4]

// Test: array void check, expect fail
$x = [1]
x[0] = void

// Test: array truncate
$x = []
x.truncate(2)
assertEqual(x.length, 2)
assertEqual(x[0], null)
assertEqual(x[1], null)
x.truncate(0)
assertEqual(x.length, 0)

// Test: array clone
$x = [1, 2, 3]
$y = x.clone()

assertEqual(x.length, y.length)
assertEqual(x[0], y[0])
assertEqual(x[1], y[1])
assertEqual(x[2], y[2])

// Test: array clear
$x = [1, 2, 3]
x.clear()
assertEqual(x.length, 0)

// Test: array slice
$x = [0, 1, 2, 3]
$y

y = x.slice(2)
assertEqual(y.length, 2)
assertEqual(y[0], 2)
assertEqual(y[1], 3)

y = x.slice(1, 3)
assertEqual(y.length, 2)
assertEqual(y[0], 1)
assertEqual(y[1], 2)

y = x.slice(-2)
assertEqual(y.length, 2)
assertEqual(y[0], 2)
assertEqual(y[1], 3)

y = x.slice(0, -2)
assertEqual(y.length, 2)
assertEqual(y[0], 0)
assertEqual(y[1], 1)

y = x.slice(-2, -1)
assertEqual(y.length, 1)
assertEqual(y[0], 2)

// Test: array splice
$x = [1, 2, 3]
$y

y = x.clone()
y.splice(1, 1)
assertEqual(y.length, 2)
assertEqual(y[0], 1)
assertEqual(y[1], 3)

y = x.clone()
y.splice(1, 1, [5, 6])
assertEqual(y.length, 4)
assertEqual(y[0], 1)
assertEqual(y[1], 5)
assertEqual(y[2], 6)
assertEqual(y[3], 3)

y = x.clone()
y.splice(y.length, 0, [4])
assertEqual(y.length, 4)
assertEqual(y[3], 4)

// Test: array push
$x = [1]
x.push(2, 3)
assertEqual(x.length, 3)
assertEqual(x[1], 2)
assertEqual(x[2], 3)

// Test: array append
$x = [1]
x.append([2, 3])
assertEqual(x.length, 3)
assertEqual(x[1], 2)
assertEqual(x[2], 3)

// Test: array pop
$x = [1, 2]
$last = x.pop()
assertEqual(x.length, 1)
assertEqual(last, 2)

// Test: array unshift
$x = [1]
x.unshift(-1, "pre")
assertEqual(x.length, 3)
assertEqual(x[0], -1)
assertEqual(x[1], "pre")

// Test: array prepend
$x = [1]
x.prepend([-1, "pre"])
assertEqual(x.length, 3)
assertEqual(x[0], -1)
assertEqual(x[1], "pre")

// Test: map
$a = 5
$map = {a, b: true, [1]: "c"}
assertEqual(map.length, 3)
assertEqual(map["a"], 5)
assertEqual(map["b"], true)
assertEqual(map[1], "c")
assertEqual(map["other"], void)

map["a"] = 6
assertEqual(map["a"], 6)

map["a"] = void
assertEqual(map["a"], void)
assertEqual(map.length, 2)

// Test: map clear
$map = {a: 1, b: 2, c: 3}
map.clear()
assertEqual(map.length, 0)

// Test: map clone
$map = {a: 1, b: 2, c: 3}
$other = map.clone()

assertEqual(map.length, other.length)
assertEqual(map["a"], other["a"])
assertEqual(map["b"], other["b"])
assertEqual(map["c"], other["c"])

// Test: map keys
$map = {a: 1, b: 2, c: 3}
$keys = map.keys()

assertEqual(keys.length, 3)
assertEqual(keys[0], "a")
assertEqual(keys[1], "b")
assertEqual(keys[2], "c")

// Test: map values
$map = {a: 1, b: 2, c: 3}
$values = map.values()

assertEqual(values.length, 3)
assertEqual(values[0], 1)
assertEqual(values[1], 2)
assertEqual(values[2], 3)

// Test: map entries
$map = {a: 1, b: 2, c: 3}
$entries = map.entries()

assertEqual(entries.length, 3)
assertEqual(entries[0][0], "a")
assertEqual(entries[0][1], 1)

assertEqual(entries[1][0], "b")
assertEqual(entries[1][1], 2)

assertEqual(entries[2][0], "c")
assertEqual(entries[2][1], 3)

// Test: unreachable, expect fail
unreachable()

// Test: while
$list = [1, 2, 3]
$i = 0

@while(i < list.length, (
    i = i + 1
    increment()
))

assertEqual(getCounter(), 3)

// Test: implicit string argument
$thunk = \(v) {
    assertEqual(v, "foo")
    increment()
}

thunk"foo"
assertEqual(getCounter(), 1)
assertEqual("bar")"bar"

$state = { q: 0 }
$s = \(key, value) {
    state[key] = value
}

s"q" = 5
assertEqual(state["q"], 5)

// Test: return statement
$thunk = \{
    increment()
    return(5)
    increment()
}

assertEqual(thunk(), 5)
assertEqual(getCounter(), 1)

// Test: return statement 2
$thunk = \{
    $i = 0
    @while(true, (
        @if(i > 10, (
            return(i)
        ))

        i = i + 1
    ))
}

// Test: return statement 3
return()
assertEqual(false, true)
