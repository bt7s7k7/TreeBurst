// Test: assert success
assert(true)

// Test: assert fail, expect fail
assert(false)

// Test: comparison operators
assert(true == true)
assert(false == false)
assert(true != false)
assert(1 != "")
assert(1 == 1)
assert(1 != 2)
assert(void != null)
assert(void == void)

// Test: assert equal
assertEqual(1, 1)

// Test: assert unequal, expect fail
assertEqual(1, 2)

// Test: logical operators
assertEqual(false && false, false)
assertEqual(true && false, false)
assertEqual(false && true, false)
assertEqual(true && true, true)

assertEqual(false || false, false)
assertEqual(true || false, true)
assertEqual(false || true, true)

assertEqual(getCounter(), 0)

1 && increment()
assertEqual(getCounter(), 1)

0 && increment()
assertEqual(getCounter(), 1)

1 || increment()
assertEqual(getCounter(), 1)

0 || increment()
assertEqual(getCounter(), 2)

// Test: coalescing
assertEqual(false ?? 0, false)
assertEqual(null ?? 0, 0)
assertEqual(void ?? 0, 0)
assertEqual(null else 0, null)
assertEqual(void else 0, 0)

// Test: numeric operators
assertEqual(1 + 1.5, 2.5)
assertEqual(1 - 1.5, -0.5)
assertEqual(1 * 1.5, 1.5)
assertEqual(2 / 4, 0.5)
assertEqual(5 % 2, 1)
assertEqual(-(1 + 1), -2)
assertEqual(3 | 4, 7)
assertEqual(3 & 1, 1)
assertEqual(3 ^ 1, 2)

// Test: numeric operators typecheck, expect fail
void + 1

// Test: if
assertEqual(@if(true 1 0), 1)
assertEqual(@if(false 1 0), 0)
assertEqual(@if(false 1), void)

// Test: function declaration
assertEqual((\4)(), 4)
assertEqual((\(a) a + 1)(2), 3)

// Test: variable declaration
$x = 1
assertEqual(x, 1)
assertEqual($y = 2, 2)
assertEqual(x = x + 1, 2)
assertEqual(x, 2)

// Test: variable declaration duplicate, expect fail
$x = 1
$x = 2

// Test: table new
$table = Table.new()
$table.name = "foo"
assertEqual(table.name, "foo")

// Test: table property mutation
$table = Table.new()
$table.x = 1
assertEqual(table.x, 1)
table.x = 2
assertEqual(table.x, 2)

// Test: table duplicate property, expect fail
$table = Table.new()
$table.name = "foo"
$table.name = "foo2"

// Test: table method declaration
$table = Table.new()
$table.foo = \(this, arg) {
    assertEqual(this, table)
    assertEqual(arg, 24)
    increment()
}

table.foo(24)
assertEqual(getCounter(), 1)

$table.bar = \(a, b) {
    assertEqual(a, "a")
    assertEqual(b, "b")
    increment()
}

table.bar("a", "b")
assertEqual(getCounter(), 2)

// Test: native type extension
$Number.prototype.plusOne = \(this) this + 1

assertEqual((1).plusOne(), 2)

// Test: checking setting properties, expect fail
"text".x = 5

// Test: checking declaring properties, expect fail
$"text".x = 5

// Test: array
$x = [1,2,3]
assertEqual(x.length, 3)
assertEqual(x[0], 1)
assertEqual(x[1], 2)
assertEqual(x[-1], 3)
assertEqual(x[-2], 2)

x[0] = 5
assertEqual(x[0], 5)

// Test: array bounds check 1, expect fail
$x = [1,2,3]
x[4]

// Test: array bounds check 2, expect fail
$x = [1,2,3]
x[-4]
